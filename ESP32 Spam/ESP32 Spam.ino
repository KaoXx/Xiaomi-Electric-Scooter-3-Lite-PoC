// ESP32 Arduino Lock/Unlock Commands
// Author: Jesús Andrés Altozano 
// Github: https://github.com/KaoXx


#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEServer.h>

BLEAdvertising *pAdvertising;  // global variable

// User selectable variable
int delaySeconds = 2; // delay in seconds

// Commands for blocking
uint8_t blockCommands[][12] = {
  {0x19, 0x00, 0xB5, 0xF0, 0x1B, 0x8C, 0x5D, 0xE6, 0xE0, 0xCD, 0x67, 0x5B},
  {0x1B, 0x00, 0x5D, 0x2D, 0xF0, 0xB4, 0xD6, 0x0D, 0x26, 0x17, 0x86, 0x90},
  {0x1D, 0x00, 0xCA, 0xF1, 0xFA, 0xFF, 0xE4, 0xD9, 0xA7, 0x7C, 0xF8, 0x79},
  {0x1F, 0x00, 0xEB, 0xBB, 0x7A, 0x22, 0x2D, 0xA2, 0x93, 0x7E, 0x55, 0x75},
  {0x21, 0x00, 0xD1, 0x98, 0x97, 0x52, 0xF5, 0x98, 0x04, 0x8E, 0x16, 0xBF},
  {0x23, 0x00, 0x1C, 0x72, 0x8E, 0xA9, 0x25, 0x5A, 0xA0, 0x8C, 0x02, 0xF7},
  {0x19, 0x00, 0x2B, 0x7A, 0x52, 0xA5, 0xF1, 0xD2, 0x37, 0x30, 0x1E, 0x7D},
  {0x1B, 0x00, 0x56, 0xBA, 0xCC, 0xB1, 0x61, 0x7A, 0xB4, 0x50, 0xDF, 0x0D},
  {0x1D, 0x00, 0x0C, 0x88, 0x55, 0x62, 0x9C, 0x20, 0x3F, 0x44, 0x61, 0x1C},
  {0x1F, 0x00, 0x11, 0xBD, 0xF6, 0xF7, 0x22, 0xB1, 0x06, 0x19, 0x88, 0x5F},
  {0x21, 0x00, 0x6B, 0x2B, 0xAC, 0x1D, 0x09, 0x12, 0xBE, 0xB5, 0x45, 0x7B},
  {0x23, 0x00, 0xA9, 0x28, 0x1F, 0x72, 0x72, 0x4D, 0x8C, 0x93, 0x4C, 0x58},
  {0x19, 0x00, 0x37, 0x00, 0xBB, 0x6C, 0x20, 0x15, 0xEA, 0x69, 0x22, 0x4E},
  {0x1B, 0x00, 0x70, 0x82, 0x4B, 0x2A, 0x1B, 0x70, 0x11, 0xEC, 0xD0, 0x2B},
  {0x1D, 0x00, 0x47, 0xB2, 0x78, 0xEF, 0x36, 0x64, 0x1C, 0xF0, 0xD0, 0xC1},
  {0x1F, 0x00, 0xEA, 0x6A, 0xD2, 0xE6, 0x24, 0xB9, 0xD0, 0xD9, 0xCC, 0x37},
  {0x21, 0x00, 0x1A, 0x9A, 0x68, 0xB7, 0x36, 0xE9, 0x70, 0x5A, 0x15, 0xF2},
  {0x23, 0x00, 0xB5, 0xB4, 0x22, 0xF1, 0x2D, 0x8B, 0x91, 0x78, 0x98, 0xBB},
  {0x1A, 0x00, 0xEB, 0xA3, 0x99, 0xB5, 0x99, 0x3B, 0x98, 0xEB, 0xA6, 0xB0},
  {0x1C, 0x00, 0x48, 0x5A, 0xF8, 0xE2, 0x64, 0x76, 0x75, 0x84, 0x55, 0x16},
  {0x1E, 0x00, 0x2B, 0x8F, 0x46, 0x94, 0x57, 0xDA, 0x81, 0x9C, 0xE6, 0x2E},
  {0x20, 0x00, 0x29, 0x58, 0xBA, 0xC2, 0x30, 0xCF, 0x0C, 0x56, 0x03, 0xD5},
  {0x22, 0x00, 0x27, 0x90, 0xC7, 0x5B, 0x4E, 0x5B, 0x15, 0xA8, 0x00, 0xC2},
  {0x24, 0x00, 0x13, 0x24, 0x26, 0x03, 0xD9, 0x3E, 0xC4, 0x35, 0x0F, 0x3D}
};

// Commands for unlocking
uint8_t unlockCommands[][12] = {
  {0x18, 0x00, 0x7D, 0xDD, 0xAD, 0xD4, 0x5A, 0x8B, 0xD5, 0x59, 0x48, 0x81},
  {0x1A, 0x00, 0x64, 0xCC, 0xCE, 0xB8, 0x75, 0xC8, 0x2B, 0x49, 0xFB, 0x3B},
  {0x1C, 0x00, 0xC6, 0x59, 0x9C, 0xE3, 0x86, 0xC8, 0xF1, 0x50, 0xDF, 0xE3},
  {0x1E, 0x00, 0x0E, 0x7E, 0x29, 0xCB, 0x3B, 0xE8, 0x36, 0xC4, 0x0C, 0xF2},
  {0x20, 0x00, 0x98, 0xFB, 0x62, 0xF4, 0x20, 0x27, 0x55, 0x42, 0x5F, 0x6B},
  {0x22, 0x00, 0xF0, 0x07, 0x90, 0x43, 0x28, 0xD5, 0xF2, 0x8E, 0x4E, 0x6B},
  {0x18, 0x00, 0x54, 0x0E, 0x07, 0x51, 0x19, 0x07, 0xB4, 0xD5, 0xFC, 0x35},
  {0x1A, 0x00, 0xD9, 0xEB, 0xB7, 0xE4, 0x42, 0x43, 0xA3, 0x59, 0x24, 0x99},
  {0x1C, 0x00, 0x04, 0xE0, 0x10, 0x9E, 0x79, 0x90, 0x1D, 0x3C, 0xF4, 0xD2},
  {0x1E, 0x00, 0x41, 0x13, 0x0F, 0x70, 0x64, 0xA8, 0x7F, 0xCE, 0x69, 0x36},
  {0x20, 0x00, 0x93, 0x02, 0x3F, 0x1C, 0x36, 0xD3, 0x23, 0xC3, 0x04, 0x99},
  {0x22, 0x00, 0xDC, 0x78, 0xE0, 0xBA, 0x05, 0xC1, 0x7C, 0x1E, 0xFE, 0x7D},
  {0x19, 0x00, 0xB9, 0xE7, 0x44, 0xDE, 0x31, 0xBA, 0x6B, 0x94, 0x99, 0x5E},
  {0x1B, 0x00, 0x39, 0x09, 0xDD, 0xD2, 0x98, 0x61, 0xB5, 0xFF, 0x40, 0x4D},
  {0x1D, 0x00, 0x33, 0x0A, 0x09, 0xB0, 0x20, 0x01, 0xE7, 0x93, 0x4D, 0x3B},
  {0x1F, 0x00, 0xA2, 0x2A, 0x4F, 0xA5, 0x9E, 0x2B, 0x15, 0x64, 0x86, 0xC7},
  {0x21, 0x00, 0x54, 0x06, 0x29, 0xD0, 0x52, 0x43, 0xAD, 0x11, 0x5C, 0x63},
  {0x23, 0x00, 0x14, 0xC7, 0xA1, 0x74, 0x74, 0x45, 0xB5, 0x0A, 0x6F, 0x7D},
  {0x18, 0x00, 0xD7, 0x7C, 0xBB, 0xB4, 0xAF, 0x62, 0xDB, 0x71, 0x31, 0x2C},
  {0x1A, 0x00, 0x8B, 0xEF, 0xD8, 0x49, 0xD7, 0xD5, 0x93, 0x6F, 0x4D, 0x4F},
  {0x1C, 0x00, 0x66, 0xE0, 0x32, 0x6A, 0xE1, 0x70, 0xA0, 0x9A, 0x00, 0xCA},
  {0x1E, 0x00, 0x00, 0xFF, 0xE2, 0xB6, 0x43, 0xB8, 0xF1, 0xF6, 0xF2, 0x0E},
  {0x20, 0x00, 0xB5, 0xCC, 0x93, 0x06, 0xE7, 0x40, 0x98, 0xC5, 0x51, 0xD1},
  {0x22, 0x00, 0x87, 0xB3, 0xB3, 0x30, 0xB0, 0xC8, 0x0A, 0xAB, 0xEB, 0xF2}
};

void setup() {
  Serial.begin(115200);
  Serial.println("Starting ESP32 BLE");

  BLEDevice::init("");

  // Create the BLE Server
  BLEServer *pServer = BLEDevice::createServer();

  pAdvertising = pServer->getAdvertising();

  // Example usage of sending block and unlock commands
  for (int i = 0; i < sizeof(blockCommands) / sizeof(blockCommands[0]); i++) {
    pAdvertising->setManufacturerData(std::string(reinterpret_cast<char*>(blockCommands[i]), 12));
    pAdvertising->start();
    delay(1000); // Delay between commands
    pAdvertising->stop();
  }

  for (int i = 0; i < sizeof(unlockCommands) / sizeof(unlockCommands[0]); i++) {
    pAdvertising->setManufacturerData(std::string(reinterpret_cast<char*>(unlockCommands[i]), 12));
    pAdvertising->start();
    delay(1000); // Delay between commands
    pAdvertising->stop();
  }
}

void loop() {
  // Start advertising
  Serial.println("Sending Advertisement...");
  pAdvertising->start();
  delay(delaySeconds * 1000); // delay for delaySeconds seconds
  pAdvertising->stop();
}
